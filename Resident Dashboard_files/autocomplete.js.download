(function($){
	// Categorizable autocomplete widget
	$.widget( "custom.catcomplete", $.ui.autocomplete, {
		_renderMenu: function( ul, items ) {
			var self = this,
				currentCategory = "";
			$.each( items, function( index, item ) {
				if ( item.category != currentCategory ) {
					ul.append( "<li class='ui-autocomplete-category'>" + item.category + "</li>" );
					currentCategory = item.category;
				}
				self._renderItem( ul, item );
			});
		}
	});

	// Combobox i.e. Autocomplete Select Drop Down
	$.widget( "ui.combobox", {
		_create: function() {
			var input,
				self = this,
				select = this.element.hide(),
				selected = select.children( ":selected" ),
				value = selected.val() ? selected.text() : "",
				wrapper = this.wrapper = $( "<span>" )
					.addClass( "ui-combobox" )
					.insertAfter( select ), 
					selectId = this.element.attr('id');

		
			selectId = selectId ? selectId : 'ui';
			input = $( "<input>" ).attr("type", "text")
				.attr("id",selectId+'ComboBox')
				.appendTo( wrapper )
				.val( value )
				.addClass( "ui-state-default ui-combobox-input" )
				.autocomplete({
					delay: 0,
					minLength: 0,
					source: function( request, response ) {
						var matcher = new RegExp( $.ui.autocomplete.escapeRegex(request.term), "i" );
						response( select.children( "option" ).map(function() {
							var text = $( this ).text();
							if ( this.value && ( !request.term || matcher.test(text) ) )
								return {
									label: text.replace(
										new RegExp(
											"(?![^&;]+;)(?!<[^<>]*)(" +
											$.ui.autocomplete.escapeRegex(request.term) +
											")(?![^<>]*>)(?![^&;]+;)", "gi"
										), "<strong>$1</strong>" ),
									value: text,
									option: this
								};
						}) );
					},
					select: function( event, ui ) {
						ui.item.option.selected = true;
						self._trigger( "selected", event, {
							item: ui.item.option
						});
					},
					change: function( event, ui ) {
						if ( !ui.item ) {
							var matcher = new RegExp( "^" + $.ui.autocomplete.escapeRegex( $(this).val() ) + "$", "i" ),
								valid = false;
							select.children( "option" ).each(function() {
								if ( $( this ).text().match( matcher ) ) {
									this.selected = valid = true;
									return false;
								}
							});
							if ( !valid ) {
								// remove invalid value, as it didn't match anything
								$( this ).val( "" );
								select.val( "" );
								input.data( "autocomplete" ).term = "";
								return false;
							}
						}
					}
				})
				.addClass( "ui-widget ui-widget-content ui-corner-left" );

			input.data( "autocomplete" )._renderItem = function( ul, item ) {
				return $( "<li></li>" )
					.data( "item.autocomplete", item )
					.append( "<a>" + item.label + "</a>" )
					.appendTo( ul );
			};

			$("<a>")
				.attr( "tabIndex", -1 )
				.attr( "title", "Show All Items" )
				.appendTo( wrapper )
				.button({
					icons: {
						primary: "ui-icon-triangle-1-s"
					},
					text: false
				})
				.removeClass( "ui-corner-all" )
				.addClass( "ui-corner-right ui-combobox-toggle" )
				.click(function() {
					// close if already visible
					if ( input.autocomplete( "widget" ).is( ":visible" ) ) {
						input.autocomplete( "close" );
						return;
					}
					// work around a bug (likely same cause as #5265)
					$( this ).blur();
					// pass empty string as value to search for, displaying all results
					input.autocomplete( "search", "" );
					input.focus();
				});
		},
		destroy: function() {
			this.wrapper.remove();
			this.element.show();
			$.Widget.prototype.destroy.call( this );
		}
	});
})( jQuery );


function getAutocompleteInput(wrapperUUID)
{
	var inp = $("#" + wrapperUUID).find("input,select").eq(0);
	inp.unwrap();
	var inpId = inp.attr("id");
	if(typeof inpId == undefined || inpId == null || inpId == '')
	{
		inp.attr("id", 'inp' + wrapperUUID);
	}
	return inp;
}

function formatAutocompleteOutput(format, item, term, styledTerm)
{
	var leftSplit = format.split("[");
	var result = leftSplit[0];
	for(var i = 1; i < leftSplit.length; i++)
	{
		var rightSplit = leftSplit[i].split("]");
		var prop = rightSplit[0];
		var propVal = item[prop] + '';

		if( propVal )
		{
			// split the search term by space and highlight if any split exists in current property value
			var termSplits = term.toLowerCase().split(' ');
			var termInd = -1;
			var afterTermInd = 0;
			for(var j = 0; j < termSplits.length; j++)
			{
				var curSplit = termSplits[j];
				if(curSplit != '')
				{
					var splitLen = curSplit.length;
					curSplit = curSplit.charAt(splitLen - 1) == ',' ? curSplit.substring(0, splitLen - 1) : curSplit;
					termInd = propVal.toLowerCase().indexOf(curSplit);
					if(termInd != -1)
					{
						afterTermInd = termInd + curSplit.length;
						break;
					}
				}
			}
			if(termInd > -1)
			{
				result += propVal.substring(0,termInd) + "<span class='highlightSearchTerm'>" + propVal.substring(termInd, afterTermInd) + "</span>" + propVal.substring(afterTermInd) + rightSplit[1];
			}
			else
			{
				result += propVal + rightSplit[1];
			}
		}
		else
		{
			result += rightSplit[1];
		}
	}
	return result;
}

function getMultiSelectOptions(options){
	return {
        source: function( request, response ) {
        	$.ajax({
				url: options.source,
				data: {term:extractLast( request.term )},
				dataType: "json",
				success: function( data ) {
					response( data );
				},
				error: function() {
					response( [] );
				}
			});
        },
        search: function() {
          // custom minLength
          var term = extractLast( this.value );
          if ( term.length < options.minLength ) {
            return false;
          }
        },
        focus: function() {
          // prevent value inserted on focus
          return false;
        }
      };
}

function split(val){
    return val.split( /,\s*/ );
}

function extractLast(term){
    return split(term).pop();
}
var COMPONENTS_AUTOCOMPLETE_AUTOCOMPLETE_JS_LOADED = true;