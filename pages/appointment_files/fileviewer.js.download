/**
 * @author dipakkumar.prajapati
 * @info Directive for PDFTron
 */
(function(f){
  function loadDependentLibrary(){
    return {
      files: ['/mobiledoc/jsp/healowsign/viewer/lib/webviewer.min.js']
    }
  }
  var signatureFieldWidth = 350;
  var signatureFieldHeight = 50;
  var ecwviewer = f.module('ecwviewer', ['ecw.dir.scrollpane',loadDependentLibrary()]);
  ecwviewer.directive('ecwViewerPanelAdvance',['$timeout','fileViewerService','$ocLazyLoad','$modal','$templateCache',viewerDirective])
      .service('fileViewerService', [ '$http', fileViewerService ]);
  function viewerDirective($timeout,fileViewerService,$ocLazyLoad,$modal,$templateCache) {
    return {
      restrict: 'EA',
      replace: 'true',
      templateUrl: '/mobiledoc/jsp/healowsign/viewer/fileviewer.html',
      scope: {
        filename: "=",
        path: "=",
        topclass: "@",
        viewerStyle:"=?",
        afterLoaded:"&?",
        local:"=?",
        formFieldMode:"=?",
        exportXfdf:"@",
        xfdfData:"=?",
        userData:"=?",
        viewMode:"=?"
      },link: function(scope, element, attributes) {
        scope.fieldCounter={SIGNATURE:1,TEXT:1};
        scope.instance = null;
        scope.selectedElement = null;
        scope.pageEventAdded = [];
        scope.newFields = [];
        scope.mappingObject = {};
        scope.favouriteTags = [];
        scope.signatureIcon = null;
        scope.activeModal = false;
        scope.activeControlProperties = {};
        scope.selectedAnnotation = null;
        scope.selectedAnnotationCustomData = {};
        scope.dropTag = {};
        scope.letterTags = [];
        scope.formFieldDesigner = null;
        scope.customAnnotationList = [];
        scope.defaultTags = [{TagType:"Signature / Initial",ToolName:"SignatureFormFieldCreateTool",TagName:"",Icon:"tagicon",DefaultValue:"Sign",TagTypeID:"0",Mandatory:"1",isAutoGenerateId:true,isFavourite:0},
          //{TagType:"Initial",ToolName:"TextFormFieldCreateTool",TagName:"Initial",Icon:"tagicon1",DefaultValue:"Initial",TagTypeID:"0",Mandatory:"0",isAutoGenerateId:false,isFavourite:0},
          //{TagType:"SIGNDATE",ToolName:"SignatureFormFieldCreateTool",TagName:"SignDate",Icon:"tagicon2",DefaultValue:"Sign Date",TagTypeID:"0",Mandatory:"0",isAutoGenerateId:true,isFavourite:0},
          {TagType:"Text",ToolName:"TextFormFieldCreateTool",TagName:"",Icon:"tagicon3",DefaultValue:"",TagTypeID:"0",Mandatory:"0",isAutoGenerateId:true,isFavourite:0},
          //{TagType:"Label",ToolName:"AnnotationCreateFreeText",TagName:"",Icon:"tagicon4",DefaultValue:"",TagTypeID:"0",Mandatory:"0",isAutoGenerateId:true,isFavourite:0},
          {TagType:"Checkbox",ToolName:"CheckBoxFormFieldCreateTool",TagName:"",Icon:"tagicon5",DefaultValue:"",TagTypeID:"0",Mandatory:"0",isAutoGenerateId:true,isFavourite:0,defaultDimension:{Width:25,Height:25}},
          /*{TagType:"RADIOBUTTON",TagName:"RadioButton",Icon:"tagicon6",DefaultValue:"",TagTypeID:"0",Mandatory:"0",isAutoGenerateId:true,isFavourite:0,defaultDimension:{Width:25,Height:25}},
          {TagType:"DROPDOWN",TagName:"Dropdown",Icon:"tagicon7",DefaultValue:"",TagTypeID:"0",Mandatory:"0",isAutoGenerateId:true,isFavourite:0}*/
        ];
        if(!scope.userData){
          scope.userData=[];
        }
        scope.formFieldMode = scope.formFieldMode && (scope.formFieldMode===true || scope.formFieldMode==="true");
        scope.viewMode = scope.viewMode && Number.isInteger(scope.viewMode)?scope.viewMode:0;
        scope.isAfterCallback=attributes.afterLoaded?true:false;
        scope.afterLoadedCallback=function(){
          if(scope.isAfterCallback){
            scope.afterLoaded();
          }
        }

        scope.init=function(){
          scope.loadLetterTags();
          scope.refreshViewer();
        };
        scope.refreshViewer = function(){
          if(!scope.filename || !scope.path){
            return;
          }
          var data={filename:scope.filename,filePath:scope.path};

          var promise=fileViewerService.getViewerFile(data);
          promise.success(function(data) {
            if(data){
              if(data.statusCode==1){

                var docViewerElement=angular.element( document.querySelector("."+scope.topclass+" #fileViewerContentDiv"))[0];
                if(scope.instance){
                  scope.instance.closeDocument();
                  scope.instance.dispose();
                  scope.instance = null;
                }
                WebViewer(scope.getViewerObject(data.result),docViewerElement).then(function (instance) {
                  const { Annotations, annotManager,docViewer } = instance;
                  instance.UI.enableFeatures([instance.UI.Feature.Initials]);
                  if(scope.letterTags){
                    instance.annotManager.systemTags =   scope.letterTags.map(t => t.TagName)
                  }
                  if(scope.viewMode===2){
                     annotManager.setReadOnly(true);
                     instance.setToolMode("Pan");
                  }else{
                    scope.formFieldDesigner = new CustomizedFormFieldDesignerWebViewer(instance,scope.viewMode===1);
                  }
                  scope.instance = instance;
                });
              }else{
                ecwAlert(data.message,"ERROR");
              }
            }else{
              ecwAlert('Server side exception',"ERROR");
            }
          }).error(function(error) {

          })
        }

        scope.drawTag = function(toolName,tagName){
          scope.instance.customFormFieldName = tagName;
          if(scope.formFieldDesigner){
            scope.formFieldDesigner.setToolMode(toolName);
          }
        }
        scope.getGeneratedId = function(){
          return new Date().getTime();
        }
        scope.callBackMapping = function(data){
          var obj={};
          scope.mappingObject[data.oldTagName]=data.name;
        }
        scope.getViewerObject=function(generatedFile){
          var viewerJsonObject={};
          viewerJsonObject['licenseKey'] = atob("ZUNsaW5pY2FsV29ya3MgTExDIChlY2xpbmljYWx3b3Jrcy5jb20pOk9FTTplQ2xpbmljYWxXb3JrcywgaGVhbG93OjpCKzpBTVMoMjAyMzA4MzApOjZBQTVEQUVEMDQ3Nzc4MEFGMzYwQjEzQUM5ODIwMjc4NjA2MTBGRkQ5NzQ4N0U5QTBFRkYyQkY0MTg2NDEwRkU3QTQxMzVGNUM3");
          viewerJsonObject['path']='/mobiledoc/jsp/healowsign/viewer/lib';
          //viewerJsonObject['enableAnnotations']=false;
          //viewerJsonObject['saveAnnotations']=true;
          //viewerJsonObject['disabledElements'] = ["toolsHeader","header","leftPanel","searchPanel","annotationPopup","menuOverlay","toolsOverlay","annotationStylePopup","toolStylePopup","stylePopup","textPopup","contextMenuPopup"]
          viewerJsonObject['disabledElements'] = ["toolsHeader","header","leftPanel","searchPanel","contextMenuPopup"]
          viewerJsonObject['initialDoc'] = generatedFile.previewFileName;
          viewerJsonObject['annotationUser'] = global.TrUserName;
          return viewerJsonObject;
        };
        scope.$watchGroup(['filename','path'], function(newVal, oldVal) {
          if(newVal!=oldVal){
            if(scope.instance){
              scope.instance.docViewer.closeDocument().then(function () {
                angular.element( document.querySelector("."+scope.topclass+" #fileViewerContentDiv")).empty();
                scope.refreshViewer();
              });
            }else{
              scope.refreshViewer();
            }
          }
        });

        scope.saveAnnotation = function(){
          return $.Deferred(function (dfd) {
            scope.formFieldDesigner.getPDFFile().then(function(fileObject){
              fileTransferService.upload([fileObject], scope.filename, scope.path, {},["PDF"]).then(function (data) {
                $timeout(function(){
                  dfd.resolve("");
                });
              },function(error){
                dfd.reject("Error while uploading file");
              })
            })
          });
        }
        scope.openLetterTagmodal=function(selectedObject){
          $ocLazyLoad.load({
            name: 'LetterTags',
            files:['/mobiledoc/jsp/healowsign/letters/js/lettertagmodal.js']
          }).then(function() {
            var modalInstance = $modal.open({
              templateUrl: '/mobiledoc/jsp/healowsign/letters/View/lettertagsmodal.html',
              controller: 'LetterTagCtrl',
              controllerAs : 'lettertagCtrl',
              size: 'lg',
              windowClass	: 'app-modal-window bluetheme ',
              backdrop: "static",
              resolve: {
                letterTagObject: function() {
                  return selectedObject;
                },
              }
            });
            modalInstance.result.then(function(modalInstanceResponse) {
            }, function(modalInstanceResponse) {
              if(modalInstanceResponse && modalInstanceResponse.eventBy && modalInstanceResponse.eventBy==='Ok'){
                scope.activeControlProperties.name=modalInstanceResponse.data.TagName;
                scope.activeControlProperties.value=modalInstanceResponse.data.TagName;
                scope.activeControlProperties.typeId = 1;
                if(scope.selectedAnnotation){
                  scope.selectedAnnotation.Id = scope.activeControlProperties.name;
                  scope.selectedAnnotation.setContents(scope.activeControlProperties.value)
                }
              }
            });
          }, function(e) {
          });
        }
        scope.manageFavouriteTags = function(data,action,$event){
          $event.preventDefault();
          $event.stopPropagation();
          data["TrUserId"] = global.TrUserId;
          if(!data.TagName || data.TagName.length<=0){
            data.TagName = data.TagType;
          }
          var promise = null;
          if(action === 0){
            promise=fileViewerService.addFavouriteTags(data);
          }else{
            promise=fileViewerService.removeFavouriteTags(data);
          }
          promise.success(function(data1) {
            if(data1 && data1.statusCode==1){
              scope.getFavouriteTags();
            }else{

            }
          }).error(function(error) {

          });
        }
        scope.getFavouriteTags = function(){
          var promise=fileViewerService.getFavouriteTags({"TrUserId":global.TrUserId});
          promise.success(function(data) {
            if(data && data.statusCode==1){
              scope.favouriteTags = data.result;
              scope.letterTags.forEach(letterTagsKey => {
                letterTagsKey.isFavourite = 0;
              })
              scope.defaultTags.forEach(defaultTags => {
                defaultTags.isFavourite = 0;
              })

              for (let favouriteTag of scope.favouriteTags) {
                if(favouriteTag.TagType && favouriteTag.TagType.length>0){
                  for (let letterTagsKey of scope.defaultTags) {
                    if (favouriteTag.TagType.toLowerCase() === letterTagsKey.TagType.toLowerCase()) {
                      letterTagsKey.isFavourite = 1;
                      favouriteTag.Mandatory = letterTagsKey.Mandatory;
                      favouriteTag.ToolName = letterTagsKey.ToolName;
                      favouriteTag.TagName = letterTagsKey.TagName;
                      break;
                    }
                  }
                }else{
                  for (let letterTagsKey of scope.letterTags) {
                    if (favouriteTag.TagName === letterTagsKey.TagName) {
                      letterTagsKey.isFavourite = 1;
                      favouriteTag.ToolName = 'TextFormFieldCreateTool'
                      break;
                    }
                  }
                }
              }
            }else{
              ecwAlert("Error while loading favorite tags","Error");
            }
          }).error(function(error) {
            ecwAlert("Error while loading favorite tags. Server side issue. Please try again or contact eClinicalWorks support.","Error");
          });
        }
        scope.loadLetterTags = function(){
          if(scope.formFieldMode===true || scope.formFieldMode==="true"){
            var promise=fileViewerService.getLetterTags({});
            promise.success(function(data) {
              if(data && data.statusCode==1){
                scope.letterTags = data.result;
                scope.getFavouriteTags();
              }else{

              }
            }).error(function(error) {

            });
          }
        }
        scope.init();
      }
    }
  }

  function fileViewerService($http){
    return{
      getViewerFile : function(dataObj){
        dataObj["generateDownloadFilename"]=true;
        dataObj["context"]="healowSign";
        dataObj["convertToXodRequired"]=false;
        dataObj["convertRequired"]=true;

        return $http({
          method	: 'POST',
          url		: '/mobiledoc/emr/fileviewer.ecw/download',
          data	: dataObj,
          headers: {'Content-Type': 'application/json'}
        })
      },saveAnnotation : function(dataObj){
        return $http({
          method	: 'POST',
          url		: '/mobiledoc/emr/fileviewer.ecw/saveAnnotation',
          data	: dataObj,
          headers: {'Content-Type': 'application/json'}
        })
      },getSignatureIconBase64 : function(color){

        return  new Promise((resolve, reject) => {
          var c = document.createElement("canvas");
          var img = document.createElement('img');
          var ctx = c.getContext("2d");
          c.width = signatureFieldWidth;
          c.height = signatureFieldHeight;
          var svg64 = btoa('<svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 25.588 25.588" style="enable-background:new 0 0 25.588 25.588; width: 100%; height: 100%;" xml:space="preserve"><g><path style="fill:#030104;" d="M18.724,9.903l3.855,1.416l-3.206,8.729c-0.3,0.821-1.927,3.39-3.06,3.914l-0.275,0.75c-0.07,0.19-0.25,0.309-0.441,0.309c-0.054,0-0.108-0.01-0.162-0.029c-0.243-0.09-0.369-0.359-0.279-0.604l0.26-0.709c-0.575-1.117-0.146-4.361,0.106-5.047L18.724,9.903z M24.303,0.667c-1.06-0.388-2.301,0.414-2.656,1.383l-2.322,6.326l3.854,1.414l2.319-6.325C25.79,2.673,25.365,1.056,24.303,0.667z M17.328,9.576c0.108,0.04,0.219,0.059,0.327,0.059c0.382,0,0.741-0.234,0.882-0.614l2.45-6.608c0.181-0.487-0.068-1.028-0.555-1.208c-0.491-0.178-1.028,0.068-1.209,0.555l-2.45,6.608C16.592,8.855,16.841,9.396,17.328,9.576z M13.384,21.967c-0.253-0.239-0.568-0.537-1.078-0.764c-0.42-0.187-0.829-0.196-1.128-0.203c-0.031,0-0.067-0.001-0.103-0.002c-0.187-0.512-0.566-0.834-1.135-0.96c-0.753-0.159-1.354,0.196-1.771,0.47c0.037-0.21,0.098-0.46,0.143-0.64c0.144-0.58,0.292-1.18,0.182-1.742c-0.087-0.444-0.462-0.774-0.914-0.806c-1.165-0.065-2.117,0.562-2.956,1.129c-0.881,0.595-1.446,0.95-2.008,0.749c-0.686-0.244-0.755-2.101-0.425-3.755c0.295-1.49,0.844-4.264,2.251-5.524c0.474-0.424,1.16-0.883,1.724-0.66c0.663,0.26,1.211,1.352,1.333,2.653c0.051,0.549,0.53,0.952,1.089,0.902c0.55-0.051,0.954-0.539,0.902-1.089c-0.198-2.12-1.192-3.778-2.593-4.329C6.058,7.07,4.724,6.982,3.107,8.429c-1.759,1.575-2.409,4.246-2.88,6.625c-0.236,1.188-0.811,5.13,1.717,6.029c1.54,0.549,2.791-0.298,3.796-0.976c0.184-0.124,0.365-0.246,0.541-0.355c-0.167,0.725-0.271,1.501,0.167,2.155c0.653,0.982,1.576,1.089,2.742,0.321c0.045-0.029,0.097-0.063,0.146-0.097c0.108,0.226,0.299,0.475,0.646,0.645c0.42,0.206,0.84,0.216,1.146,0.224c0.131,0.003,0.31,0.007,0.364,0.031c0.188,0.083,0.299,0.185,0.515,0.389c0.162,0.153,0.333,0.312,0.55,0.476c0.18,0.135,0.39,0.199,0.598,0.199c0.304,0,0.605-0.139,0.801-0.4c0.331-0.442,0.241-1.069-0.201-1.4C13.61,22.183,13.495,22.072,13.384,21.967z"/></g></svg>');
          var b64Start = 'data:image/svg+xml;base64,';
          var image64 = b64Start + svg64;
          img.onload = function() {
            ctx.font = "12px Arial";
            ctx.beginPath();
            ctx.fillStyle = color?color:"#f5ebb6";
            ctx.fillRect(0, 0, c.width, c.height);
            ctx.drawImage(img, 5, 0,45,c.height-(c.height*0.30));
            ctx.fillStyle = "black";
            ctx.strokeText("Sign", 15, c.height * 0.90);
            url = c.toDataURL("image/jpeg");
            resolve(c.toDataURL("image/jpeg"))
          }
          img.error = function(){
            reject();
          }
          img.src = image64;
        });

      },getLetterTags:function(data){
        var strURL = "/mobiledoc/healowsign/lettertags/getLetterTags";
        return $http({
          method	: 'POST',
          url		: strURL,
          data	: data,
          headers: {'Content-Type': 'application/json'}
        });
      },getFavouriteTags:function(data){
        var strURL = "/mobiledoc/healowsign/lettertags/getFavouriteTags";
        return $http({
          method	: 'POST',
          url		: strURL,
          data	: data,
          headers: {'Content-Type': 'application/json'}
        });
      },removeFavouriteTags:function(data){
        var strURL = "/mobiledoc/healowsign/lettertags/removeFavouriteTags";
        return $http({
          method	: 'POST',
          url		: strURL,
          data	: data,
          headers: {'Content-Type': 'application/json'}
        });
      },addFavouriteTags:function(data){
        var strURL = "/mobiledoc/healowsign/lettertags/addFavouriteTags";
        return $http({
          method	: 'POST',
          url		: strURL,
          data	: data,
          headers: {'Content-Type': 'application/json'}
        });
      }
    }
  }
})(angular);
function getFileViewerScope(topClass){
  return angular.element(document.querySelector("."+topClass)).isolateScope()
}